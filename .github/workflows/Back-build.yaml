name: Build, Save to S3, and Deploy to EC2

on:
  push:
    branches:
      - main  # 원하는 브랜치로 변경

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build Docker Image
        run: docker build -t my-app:latest .

      - name: Save Docker Image to Tar
        run: docker save -o my-app.tar my-app:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload Docker Image to S3
        env:
          BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
        run: |
          aws s3 sync ./ s3://$BUCKET_NAME/ --exclude "*" --include "my-app.tar"

      - name: Deploy Docker Image to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          # Write the SSH private key to a file
          echo "$SSH_PRIVATE_KEY" > /tmp/id_rsa
          chmod 600 /tmp/id_rsa

          # Retry logic for SSH
          for i in {1..5}; do
            ssh -o ServerAliveInterval=60 -o StrictHostKeyChecking=no -i /tmp/id_rsa $EC2_USER@$EC2_HOST << 'EOF'
              # Update and install Docker if needed
              sudo apt-get update
              sudo apt-get install -y docker.io

              # Install AWS CLI if not already installed
              if ! command -v aws &> /dev/null
              then
                sudo apt-get install -y unzip
                curl "https://d1uj6qtbmh3dt5.cloudfront.net/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install
              fi

              # Download the Docker image tar file from S3
              aws s3 cp s3://$BUCKET_NAME/my-app.tar my-app.tar

              # Load the Docker image
              docker load -i my-app.tar

              # Remove any previous containers (optional)
              docker rm -f my-app-container || true

              # Run the Docker container
              docker run -d --name my-app-container -p 8081:8080 my-app:latest
            EOF
            if [ $? -eq 0 ]; then break; fi
            echo "SSH command failed, retrying in 10 seconds..."
            sleep 10
          done

      - name: Cleanup
        run: rm my-app.tar
